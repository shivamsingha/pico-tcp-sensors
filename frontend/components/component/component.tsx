/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/CJFRbkoPEVU
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Comfortaa } from 'next/font/google'
import { Gabarito } from 'next/font/google'

comfortaa({
  subsets: ['latin'],
  display: 'swap',
})

gabarito({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client'
import { CardTitle, CardHeader, CardContent, Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { DropdownMenuTrigger, DropdownMenuRadioItem, DropdownMenuRadioGroup, DropdownMenuContent, DropdownMenu } from "@/components/ui/dropdown-menu"
import { ResponsiveLine } from "@nivo/line"
import { Toggle } from "@/components/ui/toggle"
import { ClassAttributes, HTMLAttributes, JSX, SVGProps} from "react"

export function Component() {
  return (
      <div className="flex flex-col h-screen">
        <header className="bg-gray-900 text-white py-4 px-6">
          <h1 className="text-2xl font-bold">Real-Time Sensor Dashboard</h1>
        </header>
        <main className="flex-1 bg-gray-100 dark:bg-gray-800 p-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            <Card>
              <CardHeader>
                <CardTitle>Temperature</CardTitle>
                <div className="flex items-center gap-2">
                  <span className="text-4xl font-bold">24.5</span>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button size="icon" variant="ghost">
                        <ThermometerIcon className="w-6 h-6"/>
                        <span className="sr-only">Toggle temperature unit</span>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuRadioGroup value="celsius">
                        <DropdownMenuRadioItem value="celsius">Celsius</DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value="fahrenheit">Fahrenheit</DropdownMenuRadioItem>
                      </DropdownMenuRadioGroup>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
                <span className="text-gray-500 dark:text-gray-400">Â°C</span>
              </CardHeader>
              <CardContent>
                <TimeseriesChart className="aspect-[9/4]"/>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Humidity</CardTitle>
                <div className="flex items-center gap-2">
                  <span className="text-4xl font-bold">65%</span>
                  <Toggle aria-label="Show humidity">
                    <EyeIcon className="w-6 h-6"/>
                  </Toggle>
                </div>
              </CardHeader>
              <CardContent>
                <TimeseriesChart className="aspect-[9/4]"/>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>UV Intensity</CardTitle>
                <div className="flex items-center gap-2">
                  <span className="text-4xl font-bold">5.2</span>
                  <Toggle aria-label="Show UV intensity">
                    <EyeIcon className="w-6 h-6"/>
                  </Toggle>
                </div>
                <span className="text-gray-500 dark:text-gray-400">UV Index</span>
              </CardHeader>
              <CardContent>
                <TimeseriesChart className="aspect-[9/4]"/>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Luminous Intensity</CardTitle>
                <div className="flex items-center gap-2">
                  <span className="text-4xl font-bold">1200</span>
                  <Toggle aria-label="Show luminous intensity">
                    <EyeIcon className="w-6 h-6"/>
                  </Toggle>
                </div>
                <span className="text-gray-500 dark:text-gray-400">lux</span>
              </CardHeader>
              <CardContent>
                <TimeseriesChart className="aspect-[9/4]"/>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Atmosphere Pressure</CardTitle>
                <div className="flex items-center gap-2">
                  <span className="text-4xl font-bold">1013</span>
                  <Toggle aria-label="Show atmosphere pressure">
                    <EyeIcon className="w-6 h-6"/>
                  </Toggle>
                </div>
                <span className="text-gray-500 dark:text-gray-400">hPa</span>
              </CardHeader>
              <CardContent>
                <TimeseriesChart className="aspect-[9/4]"/>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Elevation</CardTitle>
                <div className="flex items-center gap-2">
                  <span className="text-4xl font-bold">120</span>
                  <Toggle aria-label="Show elevation">
                    <EyeIcon className="w-6 h-6"/>
                  </Toggle>
                </div>
                <span className="text-gray-500 dark:text-gray-400">m</span>
              </CardHeader>
              <CardContent>
                <TimeseriesChart className="aspect-[9/4]"/>
              </CardContent>
            </Card>
          </div>
        </main>
      </div>
  )
}

function EyeIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
      <svg
          {...props}
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
      >
        <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/>
        <circle cx="12" cy="12" r="3"/>
      </svg>
  )
}


function ThermometerIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
      <svg
          {...props}
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
      >
        <path d="M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z"/>
      </svg>
  )
}


function TimeseriesChart(props: JSX.IntrinsicAttributes & ClassAttributes<HTMLDivElement> & HTMLAttributes<HTMLDivElement>) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "2018-01-01", y: 7 },
              { x: "2018-01-02", y: 5 },
              { x: "2018-01-03", y: 11 },
              { x: "2018-01-04", y: 9 },
              { x: "2018-01-05", y: 12 },
              { x: "2018-01-06", y: 16 },
              { x: "2018-01-07", y: 13 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "2018-01-01", y: 9 },
              { x: "2018-01-02", y: 8 },
              { x: "2018-01-03", y: 13 },
              { x: "2018-01-04", y: 6 },
              { x: "2018-01-05", y: 8 },
              { x: "2018-01-06", y: 14 },
              { x: "2018-01-07", y: 11 },
            ],
          },
        ]}
        margin={{ top: 10, right: 20, bottom: 40, left: 40 }}
        xScale={{
          type: "time",
          format: "%Y-%m-%d",
          useUTC: false,
          precision: "day",
        }}
        xFormat="time:%Y-%m-%d"
        yScale={{
          type: "linear",
          min: 0,
          max: "auto",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
          format: "%d",
          tickValues: "every 1 day",
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  )
}
